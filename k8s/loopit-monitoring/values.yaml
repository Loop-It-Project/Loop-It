# Loop-It Monitoring Stack - Helm Values
# ===========================================

# Global Settings
global:
  storageClass: "hostpath" # Default storage class, can be overridden per component

# Component Enable/Disable Switches
prometheus:
  enabled: true
  image:
    repository: prom/prometheus
    tag: v2.47.0
    pullPolicy: IfNotPresent

  retention: "7d"
  storageSize: "10Gi"

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  # Service Discovery Configuration
  serviceDiscovery:
    enabled: true
    namespaces:
      - default
      - loopit-dev

  # Backend Scraping Configuration
  backend:
    enabled: true
    service:
      name: backend-service
      namespace: default
      port: 3000
      path: /metrics
    scrapeInterval: "10s"
    scrapeTimeout: "5s"

grafana:
  enabled: true
  image:
    repository: grafana/grafana
    tag: "10.2.0"
    pullPolicy: IfNotPresent

  # Admin Credentials (will be created as secret)
  admin:
    user: admin
    password: "monitoring123"
    existingSecret: ""
    existingSecretPasswordKey: admin-password

  # Server Configuration for Clean URLs
  server:
    domain: monitoring.localhost
    rootUrl: "http://monitoring.localhost/"
    serveFromSubPath: false

  # Security Settings
  security:
    cookieSecure: false
    cookieSamesite: "lax"
    secretKey: "" # Auto-generated if empty

  # User Management
  users:
    allowSignUp: false
    allowOrgCreate: false
    autoAssignOrg: true
    autoAssignOrgRole: "Viewer"

  # Authentication
  auth:
    anonymousEnabled: false
    basicEnabled: true
    disableLoginForm: false

  # Plugins
  plugins:
    install:
      - grafana-clock-panel
      - grafana-simple-json-datasource

  # Data Sources (auto-provisioned)
  datasources:
    prometheus:
      enabled: true
      url: "http://prometheus.monitoring.svc.cluster.local:9090"
      isDefault: true
    loki:
      enabled: true
      url: "http://loki.monitoring.svc.cluster.local:3100"

  storageSize: "2Gi"

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

loki:
  enabled: true
  image:
    repository: grafana/loki
    tag: "2.9.0"
    pullPolicy: IfNotPresent

  # Storage Configuration
  storage:
    size: "5Gi"
    filesystem:
      chunksDirectory: /loki/chunks
      rulesDirectory: /loki/rules

  # Retention Configuration
  retention:
    enabled: true
    period: "168h" # 7 days
    deleteDelay: "2h"
    deleteWorkerCount: 150

  # Limits Configuration
  limits:
    ingestionRateMB: 16
    ingestionBurstSizeMB: 32
    maxLabelNameLength: 1024
    maxLabelValueLength: 4096
    maxLabelNamesPerSeries: 30
    maxStreamsPerUser: 10000
    maxLineSize: 256000
    maxEntriesLimitPerQuery: 5000
    maxGlobalStreamsPerUser: 5000

  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "300m"

      effect: NoSchedule
  enabled: true
  
  # Simple Loki connection (static URL)
  config:
    logLevel: info
    clients:
      - url: http://loopit-monitoring-loki:3100/loki/api/v1/push
    
    # Default scrape config (wird vom Chart bereitgestellt)
    snippets:
      scrapeConfigs: |
        - job_name: kubernetes-pods
          kubernetes_sd_configs:
            - role: pod
          pipeline_stages:
            - cri: {}
            # Backend JSON log parsing
            - match:
                selector: '{app="backend"}'
                stages:
                  - json:
                      expressions:
                        level: level
                        timestamp: timestamp
                        message: msg
                        method: method
                        url: url
                        status: status
                  - labels:
                      level:
                      method:
                      status:
          relabel_configs:
            # Only scrape specific namespaces
            - source_labels:
                - __meta_kubernetes_namespace
              action: keep
              regex: (default|loopit-dev|monitoring)
            
            # Add pod labels
            - source_labels:
                - __meta_kubernetes_pod_name
              action: replace
              target_label: pod
            
            - source_labels:
                - __meta_kubernetes_namespace
              action: replace
              target_label: namespace
            
            - source_labels:
                - __meta_kubernetes_pod_label_app
              action: replace
              target_label: app
  
  # Resources
  # resources: (entfernt, da bereits weiter unten vorhanden)
  
  # Tolerations for running on all nodes
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule

# Ingress Configuration
ingress:
  enabled: true
  className: nginx

  # SSL Configuration
  ssl:
    redirect: false
    forceRedirect: false

  # Clean URL Hosts (Primary)
  hosts:
    grafana: monitoring.localhost
    prometheus: prometheus.localhost
    loki: loki.localhost
    backend: backend.localhost

  # Fallback Paths on localhost
  fallback:
    enabled: true
    host: localhost
    paths:
      grafana: /monitoring
      prometheus: /prometheus
      loki: /loki
      backend: /backend/metrics

  # Annotations
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"

# RBAC Configuration
rbac:
  create: true

  # ServiceAccount Configuration
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # Prometheus Permissions
  prometheus:
    clusterRole:
      create: true
      rules:
        - apiGroups: [""]
          resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["extensions"]
          resources: ["ingresses"]
          verbs: ["get", "list", "watch"]
        - nonResourceURLs: ["/metrics"]
          verbs: ["get"]

  # Promtail Permissions
  promtail:
    clusterRole:
      create: true
      rules:
        - apiGroups: [""]
          resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
          verbs: ["get", "list", "watch"]

# Security Contexts
securityContext:
  prometheus:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]

  grafana:
    runAsNonRoot: true
    runAsUser: 472
    fsGroup: 472
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]

  loki:
    runAsNonRoot: true
    runAsUser: 10001
    fsGroup: 10001
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    readOnlyRootFilesystem: false

  promtail:
    runAsNonRoot: false
    runAsUser: 0
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
      add: ["DAC_READ_SEARCH"]
    readOnlyRootFilesystem: true

# Health Checks Configuration
healthChecks:
  prometheus:
    liveness:
      path: "/-/healthy"
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readiness:
      path: "/-/ready"
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

  grafana:
    liveness:
      path: "/api/health"
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 3
    readiness:
      path: "/api/health"
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 3

  loki:
    liveness:
      path: "/ready"
      initialDelaySeconds: 45
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readiness:
      path: "/ready"
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

  promtail:
    liveness:
      path: "/ready"
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readiness:
      path: "/ready"
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

# Persistent Storage Configuration
persistence:
  enabled: true

  prometheus:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: "10Gi"
    annotations: {}

  grafana:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: "2Gi"
    annotations: {}

  loki:
    storageClass: ""
    accessMode: ReadWriteOnce
    size: "5Gi"
    annotations: {}

# Node Selectors and Tolerations
nodeSelector: {}

tolerations: []

# Promtail-specific tolerations (FIXED format)
promtailTolerations:
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule

affinity: {}

# Pod Annotations
podAnnotations:
  prometheus:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"

  grafana:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

  loki:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3100"
    prometheus.io/path: "/metrics"

  promtail:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
    prometheus.io/path: "/metrics"

# Service Configuration
service:
  type: ClusterIP
  annotations: {}

# Backend Integration (Target Services to Monitor)
backend:
  services:
    # Primary backend service
    - name: backend-service
      namespace: default
      port: 3000
      path: /metrics
      scrapeInterval: "10s"

    # Alternative backend service
    - name: backend
      namespace: loopit-dev
      port: 3000
      path: /metrics
      scrapeInterval: "10s"

  # Automatically annotate backend services for Prometheus
  autoAnnotate: true
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

# Development/Debug Settings
debug:
  enabled: false
  verboseLogging: false

# Environment-specific overrides
environment: production

# Custom Labels (added to all resources)
labels: {}

# Custom Annotations (added to all resources)
annotations: {}
