apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: loopit-ingress
  namespace: loopit-dev
  annotations:
    # NGINX Ingress Controller
    kubernetes.io/ingress.class: nginx
    
    # CORS Headers für API Requests
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-Requested-With"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Weitere nützliche Annotations
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    
    # SSL Redirect deaktivieren für lokale Entwicklung
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    
    # Rewrite für bessere API Pfade (optional)
    # nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
      # API Routes - Backend (höhere Priorität durch längeren Pfad)
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 3000
      
      # Health Check für Backend
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 3000
      
      # Frontend - Alle anderen Routen (niedrigere Priorität)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
  
  # Optional: Weitere Hosts für verschiedene Environments
  # - host: loopit.local
  #   http:
  #     paths:
  #     - path: /api
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: backend
  #           port:
  #             number: 3000
  #     - path: /
  #       pathType: Prefix
  #       backend:
  #         service:
  #           name: frontend
  #           port:
  #             number: 80

---
# Optional: Service für NGINX Ingress Controller LoadBalancer
# (Für Docker Desktop normalerweise nicht nötig)
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller-loadbalancer
  namespace: ingress-nginx
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx