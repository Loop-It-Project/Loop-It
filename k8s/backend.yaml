apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: loopit-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: loopit/backend:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
          name: http
        env:
        # Normale Config-Werte
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          value: "production"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: POSTGRES_USER
          value: "loop_user"
        - name: POSTGRES_DB
          value: "loop-it"
        - name: FRONTEND_URL
          value: "http://localhost:3001"
        - name: JWT_EXPIRES_IN
          value: "7d"
        
        # Secrets
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: loopit-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: loopit-secrets
              key: jwt-secret
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: loopit-secrets
              key: jwt-refresh-secret
        - name: DATABASE_URL
          value: "postgresql://loop_user:$(POSTGRES_PASSWORD)@postgres:5432/loop-it"
        
        # üè• HEALTH CHECKS (angepasst f√ºr Backend mit DB-Abh√§ngigkeit)
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30    # Warte 30s f√ºr DB-Connection + Migrations
          periodSeconds: 10          # Pr√ºfe alle 10s w√§hrend Startup
          timeoutSeconds: 5          # Timeout nach 5s
          failureThreshold: 12       # 12 failures (120s total) ‚Üí failed startup
          successThreshold: 1        # 1 success ‚Üí startup complete
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60    # Warte bis Startup complete
          periodSeconds: 30          # Pr√ºfe alle 30s (weniger aggressiv)
          timeoutSeconds: 10         # L√§ngerer Timeout
          failureThreshold: 3        # 3 failures ‚Üí Neustart
          successThreshold: 1        # 1 success ‚Üí healthy
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 45    # Nach Startup aber vor Liveness
          periodSeconds: 10          # Pr√ºfe alle 10s
          timeoutSeconds: 5          # Timeout nach 5s
          failureThreshold: 2        # 2 failures ‚Üí aus Service entfernen
          successThreshold: 1        # 1 success ‚Üí ready
        
        # Resource Management
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1024Mi"
            cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: loopit-dev
spec:
  selector:
    app: backend
  ports:
  - port: 3000
    targetPort: 3000
    name: http