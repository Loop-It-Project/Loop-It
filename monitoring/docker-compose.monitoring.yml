services:
  prometheus:
    image: prom/prometheus:latest
    container_name: loop-it-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-7d}'
      - '--web.enable-lifecycle'
      - '--web.external-url=${PROMETHEUS_WEB_EXTERNAL_URL:-http://localhost:9090}'
    environment:
      - PROMETHEUS_ADMIN_PASSWORD=${PROMETHEUS_ADMIN_PASSWORD}
    networks:
      - loop-it-network
    restart: unless-stopped
    user: "nobody"
    read_only: true
    tmpfs:
      - /tmp

  grafana:
    image: grafana/grafana:latest
    container_name: loop-it-grafana
    ports:
      - "3001:3000"
    environment:
      # Security Settings
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=true
      - GF_SECURITY_X_XSS_PROTECTION=true
      
      # User Management
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      
      # Authentication
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      
      # Logging
      - GF_LOG_LEVEL=warn
      - GF_LOG_MODE=console
      - GF_LOG_FILTERS=rendering:debug
      
      # Server Settings
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - loop-it-network
    restart: unless-stopped
    user: "472"

  loki:
    image: grafana/loki:latest
    container_name: loop-it-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    environment:
      - LOKI_AUTH_ENABLED=${LOKI_AUTH_ENABLED:-false}
      - LOKI_SERVER_HTTP_LISTEN_PORT=${LOKI_SERVER_HTTP_LISTEN_PORT:-3100}
    networks:
      - loop-it-network
    restart: unless-stopped
    user: "10001"
    read_only: true
    tmpfs:
      - /tmp

  promtail:
    image: grafana/promtail:latest
    container_name: loop-it-promtail
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - loop-it-network
    restart: unless-stopped
    user: "0"  # Needs root for Docker socket access

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  loop-it-network:
    name: ${MONITORING_NETWORK:-loop-it_loop-it-network}
    external: true