# k8s-aws/ingress-aws.yaml - AWS Load Balancer optimiert
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: loop-it-ingress
  namespace: loop-it
  labels:
    app: loop-it
    component: ingress
    environment: aws-production
  annotations:
    # NGINX Ingress Controller für AWS
    kubernetes.io/ingress.class: "nginx"
    
    # AWS-optimierte Einstellungen
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    
    # CORS für Frontend-Backend Communication
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-Requested-With"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Load Balancer Annotations (AWS spezifisch)
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  ingressClassName: nginx
  rules:
  # Hauptregel ohne Host (funktioniert mit AWS Load Balancer URL)
  - http:
      paths:
      # ==============================
      # MONITORING ROUTES (höchste Priorität)
      # ==============================
      
      # Grafana auf /monitoring/
      - path: /monitoring
        pathType: Prefix
        backend:
          service:
            name: grafana-external
            port:
              number: 3000
      
      # Prometheus auf /prometheus/
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-external
            port:
              number: 9090
      
      # Loki auf /loki/
      - path: /loki
        pathType: Prefix
        backend:
          service:
            name: loki-external
            port:
              number: 3100
      
      # ==============================
      # LOOP-IT APPLICATION ROUTES
      # ==============================
      
      # Backend API (höhere Priorität vor Frontend)
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 3000
      
      # Backend Health Check
      - path: /health
        pathType: Exact
        backend:
          service:
            name: backend
            port:
              number: 3000
      
      # Backend Metrics (für Prometheus)
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: backend
            port:
              number: 3000
      
      # Frontend - Alle anderen Routen (niedrigste Priorität)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80

---
# ExternalName Services für Cross-Namespace-Zugriff (Monitoring)
apiVersion: v1
kind: Service
metadata:
  name: grafana-external
  namespace: loop-it
  labels:
    app: monitoring
    component: proxy
spec:
  type: ExternalName
  externalName: grafana.monitoring.svc.cluster.local
  ports:
  - port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-external
  namespace: loop-it
  labels:
    app: monitoring
    component: proxy
spec:
  type: ExternalName
  externalName: prometheus.monitoring.svc.cluster.local
  ports:
  - port: 9090
    targetPort: 9090

---
apiVersion: v1
kind: Service
metadata:
  name: loki-external
  namespace: loop-it
  labels:
    app: monitoring
    component: proxy
spec:
  type: ExternalName
  externalName: loki.monitoring.svc.cluster.local
  ports:
  - port: 3100
    targetPort: 3100