name: Loop-It Docker Pipeline

on:
  push:
    branches:
      - main
      - feature/docker
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Check for Backend Vulnerabilities
        working-directory: ./backend
        run: npm audit --audit-level=high || echo "Vulnerabilities found, continuing build"
      
      - name: Run Backend Linter (if available)
        working-directory: ./backend
        run: npm run lint || echo "No linter configured, skipping"
      
      - name: Build Backend Application
        working-directory: ./backend
        run: |
          export BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          export VERSION=${{ github.sha }}
          npm run build
      
      - name: Save Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: ./backend/dist
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/loop-it-backend:${{ github.sha }}
            ${{ vars.DOCKERHUB_USERNAME }}/loop-it-backend:latest
          platforms: linux/amd64,linux/arm64

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
      
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Check for Frontend Vulnerabilities
        working-directory: ./frontend
        run: npm audit --audit-level=high || echo "Vulnerabilities found, continuing build"
      
      - name: Run Frontend Linter (if available)
        working-directory: ./frontend
        run: npm run lint || echo "No linter configured, skipping"
      
      - name: Build Frontend Application
        working-directory: ./frontend
        run: |
          export VITE_COMMIT_SHA=${{ github.sha }}
          export VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          npm run build
      
      - name: Save Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: ./frontend/dist
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ vars.DOCKERHUB_USERNAME }}/loop-it-frontend:${{ github.sha }}
            ${{ vars.DOCKERHUB_USERNAME }}/loop-it-frontend:latest
          platforms: linux/amd64,linux/arm64

  test-integration:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Test Docker Compose Setup
        run: |
          # Create test environment
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > .env
          echo "VERSION=${{ github.sha }}" >> .env
          echo "COMPOSE_PROJECT_NAME=loop-it-ci" >> .env
          
          # Start services
          docker compose up -d --wait
          
          # Debug: Show container status
          echo "=== Container Status ==="
          docker compose ps
          
          # Debug: Show frontend logs immediately
          echo "=== Frontend Logs ==="
          docker compose logs frontend
          
          # Wait longer for services to be ready
          echo "Waiting for services to start..."
          sleep 60
          
          # Debug: Show container status again
          echo "=== Container Status After Wait ==="
          docker compose ps
          
          # Retry frontend check up to 5 times with backoff
          echo "Testing frontend accessibility..."
          for i in {1..5}; do
            if curl -f http://localhost/; then
              echo "âœ… Frontend is accessible!"
              break
            fi
            echo "Waiting for frontend... attempt $i/5"
            # Debug: Show more logs
            echo "Frontend logs (attempt $i):"
            docker compose logs --tail=10 frontend
            sleep 15
          done
          
          # Test database connection
          echo "Testing database connection..."
          docker compose exec -T postgres pg_isready -U loop_user -d loop-it || exit 1
          echo "âœ… Database is ready!"
          
          # Optional: Test backend health endpoint
          echo "Testing backend health..."
          curl -f http://localhost:3000/health || echo "No health endpoint, skipping"
          
          echo "ðŸŽ‰ All integration tests passed!"
      
      - name: Cleanup
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  # Optional: Deploy job for later
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-backend, build-frontend, test-integration]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Deploy to Server
  #       uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.SSH_KEY }}
  #         script: |
  #           # Stop old containers
  #           sudo docker stop loop-it-backend loop-it-frontend loop-it-postgres || true
  #           sudo docker rm loop-it-backend loop-it-frontend loop-it-postgres || true
  #           
  #           # Pull and run new images
  #           sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/loop-it-backend:${{ github.sha }}
  #           sudo docker pull ${{ vars.DOCKERHUB_USERNAME }}/loop-it-frontend:${{ github.sha }}
  #           
  #           # Start with docker compose
  #           cd /path/to/your/deployment
  #           sudo docker compose up -d